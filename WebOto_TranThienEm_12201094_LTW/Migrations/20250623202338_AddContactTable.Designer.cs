// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebOto_TranThienEm_12201094_LTW.Models.Data;

#nullable disable

namespace WebOto_TranThienEm_12201094_LTW.Migrations
{
    [DbContext(typeof(CarDbContext))]
    [Migration("20250623202338_AddContactTable")]
    partial class AddContactTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebOto_TranThienEm_12201094_LTW.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LogoUrl = "/images/brands/toyota.png",
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = 2,
                            LogoUrl = "/images/brands/honda.png",
                            Name = "Honda"
                        },
                        new
                        {
                            Id = 3,
                            LogoUrl = "/images/brands/mazda.png",
                            Name = "Mazda"
                        },
                        new
                        {
                            Id = 4,
                            LogoUrl = "/images/brands/hyundai.png",
                            Name = "Hyundai"
                        },
                        new
                        {
                            Id = 5,
                            LogoUrl = "/images/brands/chevrolet.png",
                            Name = "Chevrolet"
                        },
                        new
                        {
                            Id = 6,
                            LogoUrl = "/images/brands/ford.png",
                            Name = "Ford"
                        },
                        new
                        {
                            Id = 7,
                            LogoUrl = "/images/brands/lexus.png",
                            Name = "Lexus"
                        },
                        new
                        {
                            Id = 8,
                            LogoUrl = "/images/brands/maserati.png",
                            Name = "Maserati"
                        },
                        new
                        {
                            Id = 9,
                            LogoUrl = "/images/brands/ferrari.png",
                            Name = "Ferrari"
                        },
                        new
                        {
                            Id = 10,
                            LogoUrl = "/images/brands/porsche.png",
                            Name = "Porsche"
                        },
                        new
                        {
                            Id = 11,
                            LogoUrl = "/images/brands/mercedes.png",
                            Name = "Mercedes-Benz"
                        },
                        new
                        {
                            Id = 12,
                            LogoUrl = "/images/brands/bmw.png",
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 13,
                            LogoUrl = "/images/brands/audi.png",
                            Name = "Audi"
                        },
                        new
                        {
                            Id = 14,
                            LogoUrl = "/images/brands/rollsroyce.png",
                            Name = "Rolls-Royce"
                        },
                        new
                        {
                            Id = 15,
                            LogoUrl = "/images/brands/astonmartin.png",
                            Name = "Aston Martin"
                        });
                });

            modelBuilder.Entity("WebOto_TranThienEm_12201094_LTW.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FuelType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Transmission")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            Color = "Đen",
                            ContactPhone = "0123456789",
                            CreatedDate = new DateTime(2025, 6, 21, 23, 15, 0, 0, DateTimeKind.Utc),
                            Description = "Mô tả Toyota Camry đời mới nhất, sang trọng và tiết kiệm nhiên liệu.",
                            FuelType = "Xăng",
                            ImageUrl = "/images/cars/camry.jpg",
                            IsAvailable = true,
                            IsFeatured = false,
                            Location = "TP.HCM",
                            Mileage = 5000,
                            Name = "Toyota Camry 2023",
                            Price = 30000.00m,
                            Transmission = "Tự động",
                            Year = 2023
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            CategoryId = 2,
                            Color = "Trắng",
                            ContactPhone = "0987654321",
                            CreatedDate = new DateTime(2025, 6, 21, 23, 20, 0, 0, DateTimeKind.Utc),
                            Description = "Mô tả Honda CR-V, rộng rãi và tiện nghi.",
                            FuelType = "Xăng",
                            ImageUrl = "/images/cars/crv.jpg",
                            IsAvailable = true,
                            IsFeatured = false,
                            Location = "Hà Nội",
                            Mileage = 2000,
                            Name = "Honda CR-V 2024",
                            Price = 45000.00m,
                            Transmission = "Tự động",
                            Year = 2024
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 8,
                            CategoryId = 5,
                            Color = "Xám",
                            ContactPhone = "0901234567",
                            CreatedDate = new DateTime(2025, 6, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Maserati Ghibli sang trọng với hiệu suất vượt trội và thiết kế đẳng cấp.",
                            FuelType = "Xăng",
                            ImageUrl = "/images/cars/maserati_ghibli.jpg",
                            IsAvailable = true,
                            IsFeatured = false,
                            Location = "TP.HCM",
                            Mileage = 1500,
                            Name = "Maserati Ghibli 2023",
                            Price = 90000.00m,
                            Transmission = "Tự động",
                            Year = 2023
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 9,
                            CategoryId = 6,
                            Color = "Đỏ",
                            ContactPhone = "0912345678",
                            CreatedDate = new DateTime(2025, 6, 22, 0, 5, 0, 0, DateTimeKind.Utc),
                            Description = "Siêu xe Ferrari F8 Tributo với động cơ mạnh mẽ và thiết kế khí động học.",
                            FuelType = "Xăng",
                            ImageUrl = "/images/cars/ferrari_f8.jpg",
                            IsAvailable = true,
                            IsFeatured = false,
                            Location = "Hà Nội",
                            Mileage = 500,
                            Name = "Ferrari F8 Tributo 2024",
                            Price = 350000.00m,
                            Transmission = "Tự động",
                            Year = 2024
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 10,
                            CategoryId = 6,
                            Color = "Bạc",
                            ContactPhone = "0923456789",
                            CreatedDate = new DateTime(2025, 6, 22, 0, 10, 0, 0, DateTimeKind.Utc),
                            Description = "Biểu tượng Porsche 911 Carrera S với hiệu suất lái thể thao và sự thoải mái tối ưu.",
                            FuelType = "Xăng",
                            ImageUrl = "/images/cars/porsche_911.jpg",
                            IsAvailable = true,
                            IsFeatured = false,
                            Location = "Đà Nẵng",
                            Mileage = 800,
                            Name = "Porsche 911 Carrera S 2024",
                            Price = 180000.00m,
                            Transmission = "Tự động",
                            Year = 2024
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 11,
                            CategoryId = 5,
                            Color = "Trắng",
                            ContactPhone = "0909112233",
                            CreatedDate = new DateTime(2025, 6, 22, 0, 15, 0, 0, DateTimeKind.Utc),
                            Description = "Mercedes-Benz S-Class: biểu tượng của sự sang trọng, công nghệ và tiện nghi cao cấp.",
                            FuelType = "Xăng",
                            ImageUrl = "/images/cars/mercedes_s_class.jpg",
                            IsAvailable = true,
                            IsFeatured = false,
                            Location = "TP.HCM",
                            Mileage = 1000,
                            Name = "Mercedes-Benz S-Class 2024",
                            Price = 120000.00m,
                            Transmission = "Tự động",
                            Year = 2024
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 12,
                            CategoryId = 5,
                            Color = "Đen",
                            ContactPhone = "0988776655",
                            CreatedDate = new DateTime(2025, 6, 22, 0, 20, 0, 0, DateTimeKind.Utc),
                            Description = "BMW 7 Series: sự kết hợp hoàn hảo giữa hiệu suất, thiết kế tinh tế và trải nghiệm lái đỉnh cao.",
                            FuelType = "Xăng",
                            ImageUrl = "/images/cars/bmw_7_series.jpg",
                            IsAvailable = true,
                            IsFeatured = false,
                            Location = "Hà Nội",
                            Mileage = 2500,
                            Name = "BMW 7 Series 2023",
                            Price = 105000.00m,
                            Transmission = "Tự động",
                            Year = 2023
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 13,
                            CategoryId = 5,
                            Color = "Xám ánh kim",
                            ContactPhone = "0919223344",
                            CreatedDate = new DateTime(2025, 6, 22, 0, 25, 0, 0, DateTimeKind.Utc),
                            Description = "Audi A8: sự tinh tế trong từng chi tiết, công nghệ tiên tiến và không gian nội thất sang trọng.",
                            FuelType = "Xăng",
                            ImageUrl = "/images/cars/audi_a8.jpg",
                            IsAvailable = true,
                            IsFeatured = false,
                            Location = "Cần Thơ",
                            Mileage = 1200,
                            Name = "Audi A8 2024",
                            Price = 98000.00m,
                            Transmission = "Tự động",
                            Year = 2024
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 9,
                            CategoryId = 6,
                            Color = "Đỏ",
                            ContactPhone = "0909000007",
                            CreatedDate = new DateTime(2025, 6, 22, 1, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ferrari 812 Superfast siêu xe, đỉnh cao của tốc độ và công nghệ.",
                            FuelType = "Xăng",
                            ImageUrl = "/images/cars/ferrari_812.jpg",
                            IsAvailable = true,
                            IsFeatured = false,
                            Location = "Hồ Chí Minh",
                            Mileage = 300,
                            Name = "Ferrari 812 Superfast 2024",
                            Price = 400000.00m,
                            Transmission = "Tự động",
                            Year = 2024
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 12,
                            CategoryId = 6,
                            Color = "Xám ánh kim",
                            ContactPhone = "0909000008",
                            CreatedDate = new DateTime(2025, 6, 22, 1, 5, 0, 0, DateTimeKind.Utc),
                            Description = "BMW M8 thể thao, hiệu suất cao, thiết kế đẳng cấp.",
                            FuelType = "Xăng",
                            ImageUrl = "/images/cars/bmw_m8.jpg",
                            IsAvailable = true,
                            IsFeatured = false,
                            Location = "Đà Nẵng",
                            Mileage = 500,
                            Name = "BMW M8 2024",
                            Price = 150000.00m,
                            Transmission = "Tự động",
                            Year = 2024
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 13,
                            CategoryId = 6,
                            Color = "Đen bóng",
                            ContactPhone = "0909000009",
                            CreatedDate = new DateTime(2025, 6, 22, 1, 10, 0, 0, DateTimeKind.Utc),
                            Description = "Audi RS7 hiệu suất cao, thiết kế thể thao và công nghệ tiên tiến.",
                            FuelType = "Xăng",
                            ImageUrl = "/images/cars/audi_rs7.jpg",
                            IsAvailable = true,
                            IsFeatured = false,
                            Location = "Cần Thơ",
                            Mileage = 400,
                            Name = "Audi RS7 2024",
                            Price = 140000.00m,
                            Transmission = "Tự động",
                            Year = 2024
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 7,
                            CategoryId = 6,
                            Color = "Trắng ngọc trai",
                            ContactPhone = "0909000010",
                            CreatedDate = new DateTime(2025, 6, 22, 1, 15, 0, 0, DateTimeKind.Utc),
                            Description = "Lexus LC 500, xe thể thao hạng sang, thiết kế đẹp mắt, vận hành mạnh mẽ.",
                            FuelType = "Xăng",
                            ImageUrl = "/images/cars/lexus_lc.jpg",
                            IsAvailable = true,
                            IsFeatured = false,
                            Location = "Hà Nội",
                            Mileage = 700,
                            Name = "Lexus LC 500 2024",
                            Price = 100000.00m,
                            Transmission = "Tự động",
                            Year = 2024
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 10,
                            CategoryId = 6,
                            Color = "Bạc",
                            ContactPhone = "0923456789",
                            CreatedDate = new DateTime(2025, 6, 22, 0, 10, 0, 0, DateTimeKind.Utc),
                            Description = "Biểu tượng Porsche 911 Carrera S với hiệu suất lái thể thao và sự thoải mái tối ưu.",
                            FuelType = "Xăng",
                            ImageUrl = "/images/cars/porsche_911s.jpg",
                            IsAvailable = true,
                            IsFeatured = false,
                            Location = "Đà Nẵng",
                            Mileage = 800,
                            Name = "Porsche 911 Carrera S 2024",
                            Price = 180000.00m,
                            Transmission = "Tự động",
                            Year = 2024
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 11,
                            CategoryId = 5,
                            Color = "Trắng",
                            ContactPhone = "0909112233",
                            CreatedDate = new DateTime(2025, 6, 22, 0, 15, 0, 0, DateTimeKind.Utc),
                            Description = "Mercedes-Benz S-Class: biểu tượng của sự sang trọng, công nghệ và tiện nghi cao cấp.",
                            FuelType = "Xăng",
                            ImageUrl = "/images/cars/mercedes_ss_class.jpg",
                            IsAvailable = true,
                            IsFeatured = false,
                            Location = "TP.HCM",
                            Mileage = 1000,
                            Name = "Mercedes-Benz S-Class 2024",
                            Price = 120000.00m,
                            Transmission = "Tự động",
                            Year = 2024
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 14,
                            CategoryId = 5,
                            Color = "Trắng ngọc trai",
                            ContactPhone = "0909000011",
                            CreatedDate = new DateTime(2025, 6, 22, 1, 20, 0, 0, DateTimeKind.Utc),
                            Description = "Rolls-Royce Phantom đẳng cấp, biểu tượng của sự sang trọng tuyệt đối.",
                            FuelType = "Xăng",
                            ImageUrl = "/images/cars/rolls_phantom.jpg",
                            IsAvailable = true,
                            IsFeatured = false,
                            Location = "Hồ Chí Minh",
                            Mileage = 100,
                            Name = "Rolls-Royce Phantom 2024",
                            Price = 450000.00m,
                            Transmission = "Tự động",
                            Year = 2024
                        },
                        new
                        {
                            Id = 16,
                            BrandId = 15,
                            CategoryId = 6,
                            Color = "Đỏ rượu vang",
                            ContactPhone = "0909000012",
                            CreatedDate = new DateTime(2025, 6, 22, 1, 25, 0, 0, DateTimeKind.Utc),
                            Description = "Aston Martin DB11 xe thể thao hạng sang, đẳng cấp và hiệu suất cao.",
                            FuelType = "Xăng",
                            ImageUrl = "/images/cars/aston_db11.jpg",
                            IsAvailable = true,
                            IsFeatured = false,
                            Location = "Hà Nội",
                            Mileage = 600,
                            Name = "Aston Martin DB11 2024",
                            Price = 210000.00m,
                            Transmission = "Tự động",
                            Year = 2024
                        });
                });

            modelBuilder.Entity("WebOto_TranThienEm_12201094_LTW.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Xe sedan 4 cửa",
                            Name = "Sedan"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Xe SUV đa dụng",
                            Name = "SUV"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Xe hatchback nhỏ gọn",
                            Name = "Hatchback"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Xe bán tải",
                            Name = "Pickup"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Xe hạng sang",
                            Name = "Luxury"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Xe thể thao",
                            Name = "Sports Car"
                        });
                });

            modelBuilder.Entity("WebOto_TranThienEm_12201094_LTW.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("WebOto_TranThienEm_12201094_LTW.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CancelReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebOto_TranThienEm_12201094_LTW.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WebOto_TranThienEm_12201094_LTW.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebOto_TranThienEm_12201094_LTW.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebOto_TranThienEm_12201094_LTW.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebOto_TranThienEm_12201094_LTW.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebOto_TranThienEm_12201094_LTW.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebOto_TranThienEm_12201094_LTW.Models.Car", b =>
                {
                    b.HasOne("WebOto_TranThienEm_12201094_LTW.Models.Brand", "Brand")
                        .WithMany("Cars")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebOto_TranThienEm_12201094_LTW.Models.Category", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebOto_TranThienEm_12201094_LTW.Models.Order", b =>
                {
                    b.HasOne("WebOto_TranThienEm_12201094_LTW.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("WebOto_TranThienEm_12201094_LTW.Models.Brand", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("WebOto_TranThienEm_12201094_LTW.Models.Category", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
